var baseURL = "../../";
var $tableId;
var $table;
// 工具集合Tools
window.T = {};

// 获取请求参数
// 使用示例
// location.href = http://localhost:8080/index.html?id=123
// T.p('id') --> 123;
var url = function(name) {
	var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
	var r = window.location.search.substr(1).match(reg);
	if (r != null)
		return unescape(r[2]);
	return null;
};
T.p = url;

// 全局配置
$.ajaxSetup({
	dataType : "json",
	cache : false
});

// 重写alert
window.alert = function(msg, callback) {
	parent.layer.alert(msg, function(index) {
		parent.layer.close(index);
		if (typeof (callback) === "function") {
			callback("ok");
		}
	});
}

// 重写confirm式样框
window.confirm = function(msg, callback) {
	parent.layer.confirm(msg, {
		btn : [ '确定', '取消' ]
	}, function(index) {// 确定事件
		parent.layer.close(index);
		if (typeof (callback) === "function") {
			callback("ok");
		}
	});
}

$(function() {
	$(".icon-picker").iconPicker();
});
// 对Date的扩展，将 Date 转化为指定格式的String
// 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，
// 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)
// 例子：
// (new Date()).Format("yyyy-MM-dd hh:mm:ss.S") ==> 2006-07-02 08:09:04.423
// (new Date()).Format("yyyy-M-d h:m:s.S") ==> 2006-7-2 8:9:4.18
Date.prototype.Format = function(fmt) { // author: meizz
	var o = {
		"M+" : this.getMonth() + 1, // 月份
		"d+" : this.getDate(), // 日
		"h+" : this.getHours(), // 小时
		"m+" : this.getMinutes(), // 分
		"s+" : this.getSeconds(), // 秒
		"q+" : Math.floor((this.getMonth() + 3) / 3), // 季度
		"S" : this.getMilliseconds()
	// 毫秒
	};
	if (/(y+)/.test(fmt))
		fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
	for ( var k in o)
		if (new RegExp("(" + k + ")").test(fmt))
			fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]): (("00" + o[k]).substr(("" + o[k]).length)));
	return fmt;
}
// var time1 = new Date().Format("yyyy-MM-dd");var time2 = new
// Date().Format("yyyy-MM-dd hh:mm:ss");
//时间字段格式化
function dateFormatter(value, row, index) {
	return new Date(value).Format("yyyy-MM-dd hh:mm:ss");
}
// 连接字段格式化
function linkFormatter(value, row, index) {
	return "<a href='" + value + "' title='单击打开连接' target='_blank'>" + value + "</a>";
}
// Email字段格式化
function emailFormatter(value, row, index) {
	return "<a href='mailto:" + value + "' title='单击打开连接'>" + value + "</a>";
}
// 性别字段格式化
function sexFormatter(value) {
	if (value == "女") {
		color = 'Red';
	} else if (value == "男") {
		color = 'Green';
	} else {
		color = 'Yellow';
	}

	return '<div  style="color: ' + color + '">' + value + '</div>';
}

// 订单类型
function orderTypeFormatter(value, row, index) {
	if (value == 1) {
		color = '#4D4D4D';
		return '<div  style="color: ' + color + '">A类订单</div>';
	}
	if (value == 2) {
		color = '#4D4D4D';
		return '<div  style="color: ' + color + '">B类订单</div>';
	}
	if (value == 3) {
		color = '#4D4D4D';
		return '<div  style="color: ' + color + '">C类订单</div>';
	}
}

// 订单状态
function orderStatusFormatter(value, row, index) {
	
	if (value == 1) {
		color = '#4D4D4D';
		return '<div  style="color: ' + color + '">审核不通过</div>';
	}
	if (value == 2) {
		color = '#4D4D4D';
		return '<div  style="color: ' + color + '">审核通过</div>';
	}
	if (value == 3) {
		color = '#4D4D4D';
		return '<div  style="color: ' + color + '">已支付</div>';
	}
}
// 支付类型
function payTypeFormatter(value, row, index) {
	if (value == 1) {
		color = '#4D4D4D';
		return '<div  style="color: ' + color + '">支付宝</div>';
	}
	if (value == 2) {
		color = '#4D4D4D';
		return '<div  style="color: ' + color + '">微信</div>';
	}
	if (value == 3) {
		color = '#4D4D4D';
		return '<div  style="color: ' + color + '">银联</div>';
	}
}
// 凭证查看
function orderVoucherFormatter(value, row, index) {
	if (value === null) {
		return "<a class='btn btn-xs green'>未生成凭证</a>";
	}
	return "<a  class='btn btn-xs green' onclick=\"openOrderVoucher('"+ row.orderId+ "')\" ><span class='glyphicon glyphicon-search'></span>预览</a>";
}
//担保申请单
function applicationTable(orderId) {
	window.open(baseURL + "bond/templates/cdyh/applicationTable?orderId="+orderId, "orderDpcuments", align = "center","height=800, width=800, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, resizable=no,location=no, status=no");
}
// 打开凭证页面
function openOrderVoucher(orderId) {
	window.open(baseURL + "bond/templates/cdyh/voucherTable?orderId="+orderId, "orderDpcuments", align = "center","height=800, width=800, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, resizable=no,location=no, status=no");
}

// 选择一条记录
function getSelectedRow() {
	var grid = $($tableId);
	var rows = grid.bootstrapTable("getSelections");
	if (rows.length == 0) {
		alert("请选择一条记录");
		return;
	}
	if (rows.length > 1) {
		alert("只能选择一条记录");
		return;
	}
	return rows[0];
}

// 选择多条记录
function getSelectedRows() {
	var grid = $($tableId);
	var rows = grid.bootstrapTable("getSelections");
	console.log(rows);
	if (rows.length == 0) {
		alert("请选择一条记录");
		return;
	}
	return rows;
}

// 判断是否为空
function isBlank(value) {
	return !value || !/\S/.test(value)
}

(function($) {
	/**
	 * 拓展全局静态方法
	 */
	$.extend({
		// 初始化bootstrap-table的内容
		InitMainTable : function(tableId, fields, queryCallback, pageCallback) {
			console.log("=======InitMainTable========");

			var checkbox = {
				checkbox : true,
				visible : true
			};
			var columns = [];
			columns.push(checkbox);

			fields.forEach(function(value, index, array) {
				array[index].align = "center";
				array[index].valign = "middle";
				columns.push(array[index]);
			});

			var operation = {
				title : '操作',
				width : 120,
				align : 'center',
				valign : 'middle',
				formatter : actionFormatter
			};

			columns.push(operation);
			$tableId = tableId;
			// 记录页面bootstrap-table全局变量$table，方便应用
			$table = $(tableId).bootstrapTable(
					{
						method : 'POST', // 请求方式（*）
						// toolbar: '#toolbar', //工具按钮用哪个容器
						height : getHeight(46), // 高度
						striped : false, // 是否显示行间隔色
						cache : false, // 是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）
						pagination : true, // 是否显示分页（*）
						sortable : true, // 是否启用排序
						sortOrder : "asc", // 排序方式
						sidePagination : "server", // 分页方式：client客户端分页，server服务端分页（*）
						pageNumber : 1, // 初始化加载第一页，默认第一页,并记录
						pageSize : 10, // 每页的记录行数（*）
						pageList : [ 10, 25, 50, 100 ], // 可供选择的每页的行数（*）
						search : true, // 是否显示表格搜索
						strictSearch : true,
						showColumns : true, // 是否显示所有的列（选择显示的列）
						showRefresh : true, // 是否显示刷新按钮
						minimumCountColumns : 2, // 最少允许的列数
						clickToSelect : true, // 是否启用点击选中行
						exportDataType : "all", // 导出文件方式
						showExport : true, // 是否显示导出按钮
						buttonsAlign : "right", // 按钮位置
						exportTypes : [ 'csv', 'txt', 'sql', 'doc', 'excel',
								'xlsx', 'pdf' ], // 导出文件支持: 'json', 'xml',
													// 'png', 'csv', 'txt',
													// 'sql'，'doc', 'excel',
													// 'xlsx', 'pdf'
						Icons : 'glyphicon-export', // 导出文件图标
						// height: 500, //行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度
						uniqueId : "ID", // 每一行的唯一标识，一般为主键列
						showToggle : true, // 是否显示详细视图和列表视图的切换按钮
						cardView : false, // 是否显示详细视图
						detailView : false, // 是否显示父子表
						// 得到查询的参数
						queryParams : function(params) {
							// 这里的键的名字和控制器的变量名必须一直，这边改动，控制器也需要改成一样的
							var temp = {
								rows : params.limit, // 页面大小
								page : (params.offset / params.limit) + 1, // 页码
								sort : params.sort, // 排序列名
								sortOrder : params.order
							// 排位命令（desc，asc）
							};
							queryCallback(temp);
						},
						columns : columns,
						// 数据加载成功
						onLoadSuccess : function() {
							layer.msg("加载成功");
						},
						// 数据加载成功
						onLoadError : function() {
							layer.msg("加载数据失败", {
								time : 1500,
								icon : 2
							});
						},
						// 设置在分页事件触发时，传递分页参数给后台，重新加载数据
						onPageChange : function(number, size) {
							var params = {};
							params.start = number;
							params.limit = size;
							pageCallback(params);
						},
						rowStyle : function(row, index) { // 设置行的特殊样式
							// 这里有5个取值颜色['active', 'success', 'info', 'warning',
							// 'danger'];
							var strclass = "";
							if (index == 0) {
								strclass = "warning";
							}
							return {
								classes : strclass
							}
						},
					});
		},


		/** 同步Post * */
		syncPost : function(url, data, successCallback) {
			$.ajax({
				async : false,
				type : 'POST',
				contentType : "application/json",
				url : url,
				data : data,
				// 添加提交进度条
				beforeSend : function(request) {
					console.log(url + "===请求参数===");
					console.log(data);
					index = layer.load();// 加载数据
				},
				success : function(request) {
					layer.close(index);
					successCallback(request);
				},
				error : function(request) {
					layer.close(index);
					layer.msg("加载数据失败", {
						time : 1500,
						icon : 2
					});
				},
				dataType : "json"
			});
		},

		/** 同步Post * */
		postForm : function(url, data, successCallback) {
			$.ajax({
				async : false,
				type : 'POST',
				contentType : "application/x-www-form-urlencoded",
				url : url,
				data : data,
				// 添加提交进度条
				beforeSend : function(request) {
					console.log(url + "===请求参数===");
					console.log(data);
					index = layer.load();// 加载数据
				},
				success : function(request) {
					layer.close(index);
					successCallback(request);
				},
				error : function(request) {
					layer.close(index);
					layer.msg("加载数据失败", {
						time : 1500,
						icon : 2
					});
				},
				dataType : "json"
			});
		},

		/** 异步Post * */
		syncPostWithAsync : function(url, data, successCallback) {
			$.ajax({
				async : true,
				type : 'POST',
				contentType : "application/json",
				url : url,
				data : data,
				beforeSend : function(request) {
					index = layer.load();
				},
				success : function(request) {
					layer.close(index);
					successCallback(request);
				},
				error : function(request) {
					layer.close(index);
					layer.msg("加载数据失败", {
						time : 1500,
						icon : 2
					});
				},
				dataType : "json"
			});
		},
		/** 异步Post * */
		syncPostWithAsync : function(url, data, successCallback) {
			$.ajax({
				async : true,
				type : 'POST',
				contentType : "application/json",
				url : url,
				data : data,
				beforeSend : function(request) {
					index = layer.load();
				},
				success : function(request) {
					layer.close(index);
					successCallback(request);
				},
				error : function(request) {
					layer.close(index);
					layer.msg("加载数据失败", {
						time : 1500,
						icon : 2
					});
				},
				dataType : "json"
			});
		},
		/** Html转义 * */
		encodeHtml : function(s) {
			return (typeof s != "string") ? s : s.replace(
					/"|&|'|<|>|[\x00-\x20]|[\x7F-\xFF]|[\u0100-\u2700]/g,
					function($0) {
						var c = $0.charCodeAt(0), r = [ "&#" ];
						c = (c == 0x20) ? 0xA0 : c;
						r.push(c);
						r.push(";");
						return r.join("");
					});
		},

		/** 获取URL参数 * */
		getUrlPara : function(name) {
			var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
			var r = window.location.search.substr(1).match(reg);
			if (r != null)
				return unescape(r[2]);
			return;
		},

		/** 获取URL QueryString * */
		getUrlParas : function() {
			var url = location.href;
			if (url.indexOf("?") == -1) {
				return;
			}
			return url.substring(url.indexOf("?") + 1, url.length);
		},

		/** 获取Form参数对象-用于Post请求 * */
		getFormParasObj : function(form) {
			var o = {};
			$.each(form.serializeArray(), function(index) {
				if (o[this['name']]) {
					o[this['name']] = o[this['name']] + "," + this['value'];
				} else {
					o[this['name']] = this['value'];
				}
			});
			return o;
		},

		/** 获取Form参数字符-用于get请求 * */
		getFormParasStr : function(form) {
			var o = "";
			$.each(form.serializeArray(), function(index) {
				var key = this['name'], val = this['value'];
				if (val && val.length > 0) {
					o = o + key + "=" + val + "&";
				}
			});
			return o.substring(0, o.length - 1);
		},
		/** 获取浏览器类型 * */
		getBrowser : function() {
			var explorer = window.navigator.userAgent;
			if (explorer.indexOf("MSIE") >= 0) {
				return 'ie';
			} else if (explorer.indexOf("Firefox") >= 0) {
				return 'firefox';
			} else if (explorer.indexOf("Chrome") >= 0) {
				return 'chrome';
			} else if (explorer.indexOf("Opera") >= 0) {
				return 'opera';
			} else if (explorer.indexOf("Safari") >= 0) {
				return 'safari';
			}
		}
	});
})(jQuery);

// 查看
function select(key) {
	if (key == null) {
		return;
	}
	vm.title = "查看";
	$("#saveOrUpdate").hide();
	vm.itemPage(key);
}
// 单一修改
function update(key) {
	if (key == null) {
		return;
	}
	vm.title = "修改";
	$("#saveOrUpdate").show();
	vm.itemPage(key);
}
// 单一删除
function del(key) {
	if (key == null) {
		return;
	}
	vm.title = "删除";
	var userIds = [];
	userIds.push(key);
	vm.delPost(userIds);
}

// 表格高度自适应
function getHeight(nuber) {
	return $(window).height() - nuber;
}

// 初始化选择时间
// id==>绑定元素的id
// func==>回调方法
// 例如dateDefind('date1',function(val){
// vm.bondEnsupplier.supplierEstabDate = val;
// }) 
//vm.bondEnsupplier.supplierEstabDate  为vue的绑定元素 
function dateDefind(id, func) {
	var id = $('#' + id)
	// 初始化
	id.datetimepicker({
		language : 'zh-CN',// 显示中文
		weekStart : 0, // 一周从哪一天开始
		todayBtn : 1, //
		autoclose : 1,
		todayHighlight : 1,
		startView : 2,
		forceParse : 0,
		showMeridian : 1
	});
	// 当选择器隐藏时，讲选择框只赋值给data里面的time
	id.datetimepicker().on('hide', function(ev) {
		func(id.val())
	});
}


/*
 * Generate a random uuid.
 *
 * USAGE: Math.uuid(length, radix)
 *   length - the desired number of characters
 *   radix  - the number of allowable values for each character.
 *
 * EXAMPLES:
 *   // No arguments  - returns RFC4122, version 4 ID
 *   >>> Math.uuid()
 *   "92329D39-6F5C-4520-ABFC-AAB64544E172"
 *
 *   // One argument - returns ID of the specified length
 *   >>> Math.uuid(15)     // 15 character ID (default base=62)
 *   "VcydxgltxrVZSTV"
 *
 *   // Two arguments - returns ID of the specified length, and radix. (Radix must be <= 62)
 *   >>> Math.uuid(8, 2)  // 8 character ID (base=2)
 *   "01001010"
 *   >>> Math.uuid(8, 10) // 8 character ID (base=10)
 *   "47473046"
 *   >>> Math.uuid(8, 16) // 8 character ID (base=16)
 *   "098F4D35"
 */
(function() {
  // Private array of chars to use
  var CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');

  Math.uuid = function (len, radix) {
    var chars = CHARS, uuid = [], i;
    radix = radix || chars.length;

    if (len) {
      // Compact form
      for (i = 0; i < len; i++) uuid[i] = chars[0 | Math.random()*radix];
    } else {
      // rfc4122, version 4 form
      var r;

      // rfc4122 requires these characters
      uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';
      uuid[14] = '4';

      // Fill in random data.  At i==19 set the high bits of clock sequence as
      // per rfc4122, sec. 4.1.5
      for (i = 0; i < 36; i++) {
        if (!uuid[i]) {
          r = 0 | Math.random()*16;
          uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];
        }
      }
    }

    return uuid.join('');
  };

  // A more performant, but slightly bulkier, RFC4122v4 solution.  We boost performance
  // by minimizing calls to random()
  Math.uuidFast = function() {
    var chars = CHARS, uuid = new Array(36), rnd=0, r;
    for (var i = 0; i < 36; i++) {
      if (i==8 || i==13 ||  i==18 || i==23) {
        uuid[i] = '-';
      } else if (i==14) {
        uuid[i] = '4';
      } else {
        if (rnd <= 0x02) rnd = 0x2000000 + (Math.random()*0x1000000)|0;
        r = rnd & 0xf;
        rnd = rnd >> 4;
        uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];
      }
    }
    return uuid.join('');
  };

  // A more compact, but less performant, RFC4122v4 solution:
  Math.uuidCompact = function() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
      return v.toString(16);
    });
  };
})();
