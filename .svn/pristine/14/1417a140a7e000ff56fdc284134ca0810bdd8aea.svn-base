package com.scbid.sys.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.shiro.crypto.hash.Md5Hash;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.scbid.bond.entity.BondEnagencyEntity;
import com.scbid.bond.service.BondEnagencyService;
import com.scbid.common.utils.Constant;
import com.scbid.common.utils.DateUtils;
import com.scbid.common.utils.PageUtils;
import com.scbid.common.utils.R;
import com.scbid.common.utils.SysLog;
import com.scbid.common.validator.Assert;
import com.scbid.common.validator.ValidatorUtils;
import com.scbid.common.validator.group.AddGroup;
import com.scbid.common.validator.group.UpdateGroup;
import com.scbid.manage.entity.AccountEntity;
import com.scbid.manage.entity.CrmSupplierAccountEntity;
import com.scbid.manage.service.AccountService;
import com.scbid.manage.service.CrmSupplierAccountService;
import com.scbid.sys.entity.BondUserEntity;
import com.scbid.sys.service.BondUserRoleService;
import com.scbid.sys.service.BondUserService;

/**
 * 系统用户
 *
 * @author wangyun
 * @email 278812723
 * @date 2018-05-12 08:13:13
 */
@RestController
@RequestMapping("sys/user")
public class SysUserController extends AbstractController {
	@Autowired
	private BondUserService bondUserService;
	@Autowired
	private BondUserRoleService bondUserRoleService;
	
	@Autowired
	private AccountService accountService;
	
	@Autowired
	private CrmSupplierAccountService crmSupplierAccountService;
	
	@Autowired
	private BondEnagencyService bondEnagencyService;
	/**
	 * 列表
	 */
	@RequestMapping("/list")
	public R list(@RequestParam Map<String, Object> params) {
		PageUtils page = bondUserService.findByPage(params);
		return R.ok().put("page", page);
	}

	/**
	 * 获取登录的用户信息
	 */
	@RequestMapping("/info")
	public R info() {
		return R.ok().put("user", getUser());
	}

	/**
	 * 信息
	 */
	@RequestMapping("/info/{userId}")
	public R info(@PathVariable("userId") Long userId) {
		BondUserEntity user = bondUserService.selectById(userId);

		// 获取用户所属的角色列表
		List<Long> roleIdList = bondUserRoleService.queryRoleIdList(userId);
		user.setRoleIdList(roleIdList);

		return R.ok().put("user", user);
	}

	/**
	 * 修改登录用户密码
	 */
	@SysLog("修改密码")
	@RequestMapping("/password")
	public R password(String password, String newPassword) {
		Assert.isBlank(newPassword, "新密码不为能空");
		password = new Md5Hash(password).toHex();
		newPassword = new Md5Hash(newPassword).toHex();
		// 更新密码
		boolean flag = bondUserService.updatePassword(getUserId(), password, newPassword);
		if (!flag) {
			return R.error("原密码不正确");
		}

		return R.ok();
	}

	/**
	 * 保存
	 */
	@RequestMapping("/save")
	public R save(@RequestBody BondUserEntity bondUser) {
		ValidatorUtils.validateEntity(bondUser, AddGroup.class);
		bondUserService.save(bondUser, getUser());
		return R.ok();
	}

	/**
	 * 修改
	 */
	@RequestMapping("/update")
	public R update(@RequestBody BondUserEntity bondUser) {
		
		ValidatorUtils.validateEntity(bondUser, UpdateGroup.class);
		bondUserService.update(bondUser, getUser());
		return R.ok();
	}

	/**
	 * 删除
	 */
	@RequestMapping("/delete")
	public R delete(@RequestBody Long[] userIds) {
		List<Long> longs = new ArrayList<Long>();
		for (Long userId : userIds) {
			longs.add(userId);
		}
		List<BondUserEntity> list = bondUserService.selectBatchIds(longs);
		for (BondUserEntity entity : list) {
			entity.setUserStatus(Constant.ScheduleStatus.NORMAL.getValue());
			entity.setUpdateUesrName(getUser().getUserSurname());
			entity.setUpdateDate(DateUtils.format(new Date(), DateUtils.DATE_TIME_PATTERN));
		}
		bondUserService.updateBatchById(list);

		return R.ok();
	}
	
	/**
     * 导入
     */
	@RequestMapping("/import")
	public R importFile(@RequestParam Map<String, Object> params){
		
		BondEnagencyEntity enagencyEntity = bondEnagencyService.selectById(1);
		
		//导入管理员账号
		List<AccountEntity> accounts = accountService.selectList();
		List<BondUserEntity> users = bondUserService.selectList(null);
		List<String> loginNos = new ArrayList<String>();
		for (BondUserEntity user : users) {
			loginNos.add(user.getLoginNo());
		}
		Map<String,AccountEntity> accountMap = new HashMap<String,AccountEntity>();
		for (AccountEntity account : accounts) {
			accountMap.put(account.getAccountName(), account);
		}
		accounts = new ArrayList<AccountEntity>();
		for (AccountEntity account : accountMap.values()) {
			if (!loginNos.contains(account.getAccountName())){
				accounts.add(accountMap.get(account.getAccountName()));
			}
		}
		
		bondUserService.importAccounts(enagencyEntity,getUser(),accounts);
		
		//导入供应商
		List<CrmSupplierAccountEntity> supplierAccounts = crmSupplierAccountService.selectList();
		Map<String,CrmSupplierAccountEntity> supplierAccountMap = new HashMap<String,CrmSupplierAccountEntity>();
		for (CrmSupplierAccountEntity account : supplierAccounts) {
			supplierAccountMap.put(account.getUsername(), account);
		}
		users = bondUserService.selectList(null);
		loginNos = new ArrayList<String>();
		for (BondUserEntity user : users) {
			loginNos.add(user.getLoginNo());
		}
		
		supplierAccounts = new ArrayList<CrmSupplierAccountEntity>();
		for (CrmSupplierAccountEntity account : supplierAccountMap.values()) {
			if (!loginNos.contains(account.getUsername())){
				supplierAccounts.add(supplierAccountMap.get(account.getUsername()));
			}
		}
		
		
		bondUserService.importSupplier(getUser(),supplierAccounts);
        return R.ok();
    }
    
	/**
     * 导出
     */
    @RequestMapping("/export")
    public R exportFile(@RequestParam Map<String, Object> params){

        return R.ok();
    }
	
	
	/**
	 * 解除锁定请求
	 * @param userIds
	 * @return
	 */
	@RequestMapping("/unlock")
	public R unlock(@RequestBody Long[] userIds) {
		List<Long> longs = new ArrayList<Long>();
		for (Long userId : userIds) {
			longs.add(userId);
		}
		List<BondUserEntity> list = bondUserService.selectBatchIds(longs);
		for (BondUserEntity entity : list) {
			entity.setUpdateUesrName(getUser().getUserSurname());
			entity.setUpdateDate(DateUtils.format(new Date(), DateUtils.DATE_TIME_PATTERN));
			entity.setUserStatus(Constant.ScheduleStatus.PAUSE.getValue());
		}
		bondUserService.updateBatchById(list);

		return R.ok();

	}
	
	/**
	 * 密码重置请求
	 */
	@RequestMapping("/resetPassword")
	public R resetPassword(@RequestBody Long[] userIds) {
		List<Long> longs = new ArrayList<Long>();
		for (Long userId : userIds) {
			longs.add(userId);
		}
		List<BondUserEntity> list = bondUserService.selectBatchIds(longs);
		for (BondUserEntity entity : list) {
			entity.setUpdateUesrName(getUser().getUserSurname());
			entity.setUpdateDate(DateUtils.format(new Date(), DateUtils.DATE_TIME_PATTERN));
			entity.setPassword(new Md5Hash("123456").toHex());
		}
		bondUserService.updateBatchById(list);
		return R.ok();
	}

}
