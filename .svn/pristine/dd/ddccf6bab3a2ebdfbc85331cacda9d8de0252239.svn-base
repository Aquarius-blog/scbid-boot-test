package com.scbid.sys.service.impl;

import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import com.baomidou.mybatisplus.service.impl.ServiceImpl;
import com.scbid.common.exception.RRException;
import com.scbid.common.utils.Constant;
import com.scbid.common.utils.DateUtils;
import com.scbid.common.utils.PageUtils;
import com.scbid.common.utils.Query;
import com.scbid.sys.dao.BondRoleDao;
import com.scbid.sys.entity.BondRoleEntity;
import com.scbid.sys.service.BondRoleMenuService;
import com.scbid.sys.service.BondRoleService;
import com.scbid.sys.service.BondUserRoleService;
import com.scbid.sys.service.BondUserService;

@Service("bondRoleService")
public class BondRoleServiceImpl extends ServiceImpl<BondRoleDao, BondRoleEntity> implements BondRoleService {

	@Autowired
	private BondRoleMenuService bondRoleMenuService;
	@Autowired
	private BondUserService bondUserService;
    @Autowired
    private BondUserRoleService bondUserRoleService;
	
	@Override
	public PageUtils queryPage(Map<String, Object> params) {
		Page<BondRoleEntity> page = this.selectPage(new Query<BondRoleEntity>(params).getPage(), new EntityWrapper<BondRoleEntity>());

		return new PageUtils(page);
	}

	@Override
	@Transactional(rollbackFor = Exception.class)//事务控制
	public void save(BondRoleEntity role) {
		role.setCreateTime(DateUtils.format(new Date(), DateUtils.DATE_TIME_PATTERN));
        this.insert(role);

        //检查权限是否越权
        //checkPrems(role);

        //保存角色与菜单关系
        bondRoleMenuService.saveOrUpdate(role.getRoleId(), role.getMenuIdList());
	}

	@Override
	@Transactional(rollbackFor = Exception.class)
	public void update(BondRoleEntity role) {
		 this.updateById(role);

        //检查权限是否越权
        //checkPrems(role);

        //更新角色与菜单关系
        bondRoleMenuService.saveOrUpdate(role.getRoleId(), role.getMenuIdList());
	}

	@Override
	public void deleteBatch(Long[] roleIds) {
		//删除角色
        this.deleteBatchIds(Arrays.asList(roleIds));

        //删除角色与菜单关联
        bondRoleMenuService.deleteBatch(roleIds);

        //删除角色与用户关联
        bondUserRoleService.deleteBatch(roleIds);

	}

	@Override
	public List<Long> queryRoleIdList(Long createUserId) {
	System.out.println("createUserId:"+createUserId);
		return baseMapper.queryRoleIdList(createUserId);
	}
	
	/**
	 * 检查权限是否越权
	 */
	private void checkPrems(BondRoleEntity role){
		//如果不是超级管理员，则需要判断角色的权限是否超过自己的权限
		if(role.getRoleId() == Constant.RoleType.SYSTEM_ADMIN.getValue()){
			return ;
		}
		//查询用户所拥有的菜单列表
		List<Long> menuIdList = bondUserService.queryAllMenuId(role.getRoleId());
		
		//判断是否越权
		if(!menuIdList.containsAll(role.getMenuIdList())){
			throw new RRException("新增角色的权限，已超出你的权限范围");
		}
	}

}
